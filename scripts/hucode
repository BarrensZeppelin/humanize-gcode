#! /usr/bin/env python3.6

import pickle
import crayons
import colorama

from os import path, makedirs
from argparse import ArgumentParser, FileType

from appdirs import AppDirs

from humanize_gcode import load_gcode_flavour, SUPPORTED_FLAVOURS


def gray(s):
	return colorama.Style.DIM + s + colorama.Style.RESET_ALL


LONG_EXCLUDED = ('G0', 'G1')
dirs = AppDirs('humanize_gcode', 'zii')


if __name__ == '__main__':
	parser = ArgumentParser(description='#TODO')

	parser.add_argument('flavour', choices=SUPPORTED_FLAVOURS.keys())
	parser.add_argument('file', type=FileType('r'))

	parser.add_argument('--ljust', '-l', type=int, default=30)
	parser.add_argument('--disable-cache', '-dc', action='store_true')

	args = parser.parse_args()

	try:
		# Cache handling
		cache_path = path.join(dirs.user_cache_dir, args.flavour)
		if args.disable_cache or not path.exists(cache_path):
			flavour = load_gcode_flavour(args.flavour)
		elif path.exists(cache_path):
			with open(cache_path, 'rb') as cache:
				flavour = pickle.load(cache)

		if not args.disable_cache and not path.exists(cache_path):
			makedirs(dirs.user_cache_dir, exist_ok=True)
			with open(cache_path, 'wb') as cache:
				pickle.dump(flavour, cache)

		# Parsing of input file
		for line in args.file:
			parts = line.split(';')
			raw_gcode = parts[0].rstrip()
			if not raw_gcode:
				continue

			gcode_id = raw_gcode.split()[0]

			gcode = flavour.get(gcode_id)

			if gcode:
				print(crayons.white(f'{gcode.name.ljust(args.ljust)} {gcode.description}'))

			print(raw_gcode.ljust(args.ljust), gray(';' + ';'.join(parts[1:]).rstrip()) if len(parts) > 1 else '')

			if not gcode:
				print(crayons.yellow('Unknown GCode'))
			elif gcode_id not in LONG_EXCLUDED:
				print(crayons.green(gcode.long_description.replace('. ', '.\n')))

			print()
	finally:
		args.file.close()
